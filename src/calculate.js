function verSub(v1,v2){
    return [v1[0]-v2[0],v1[1]-v2[1],v1[2]-v2[2]]
}

function crossProduct(v1,v2){
    return [
        v1[1]*v2[2]-v1[2]*v2[1],
        v1[0]*v2[2]-v1[2]*v2[0],
        v1[0]*v2[1]-v1[1]*v2[0]
    ]
}

function normalize(v1){
    let len = Math.sqrt(v1[0]*v1[0]+v1[1]*v1[1]+v1[2]*v1[2]);
    return [
        v1[0]/len,  v1[1]/len,  v1[2]/len
    ]
}

function dot(v1,v2){
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
}


function v2m4(v){
    return [
        -v[0],0,0,0,
        -v[1],1,0,0,
        -v[2],0,1,0,
        1,0,0,1
    ]
}

function m42v(m){

    return {
        x:Math.round(m[0]/m[12]),
        y:Math.round(m[4]/m[12]),
        z:Math.round(m[8]/m[12])
    }
}

function matrixMul4(m1,m2){
    return [
        m1[0]*m2[0]+m1[1]*m2[4]+m1[2]*m2[8]+m1[3]*m2[12],
        m1[0]*m2[1]+m1[1]*m2[5]+m1[2]*m2[9]+m1[3]*m2[13],
        m1[0]*m2[2]+m1[1]*m2[6]+m1[2]*m2[10]+m1[3]*m2[14],
        m1[0]*m2[3]+m1[1]*m2[7]+m1[2]*m2[11]+m1[3]*m2[15],

        m1[4]*m2[0]+m1[5]*m2[4]+m1[6]*m2[8]+m1[7]*m2[12],
        m1[4]*m2[1]+m1[5]*m2[5]+m1[6]*m2[9]+m1[7]*m2[13],
        m1[4]*m2[2]+m1[5]*m2[6]+m1[6]*m2[10]+m1[7]*m2[14],
        m1[4]*m2[3]+m1[5]*m2[7]+m1[6]*m2[11]+m1[7]*m2[15],

        m1[8]*m2[0]+m1[9]*m2[4]+m1[10]*m2[8]+ m1[11]*m2[12],
        m1[8]*m2[1]+m1[9]*m2[5]+m1[10]*m2[9]+ m1[11]*m2[13],
        m1[8]*m2[2]+m1[9]*m2[6]+m1[10]*m2[10]+m1[11]*m2[14],
        m1[8]*m2[3]+m1[9]*m2[7]+m1[10]*m2[11]+m1[11]*m2[15],

        m1[12]*m2[0]+m1[13]*m2[4]+m1[14]*m2[8]+ m1[15]*m2[12],
        m1[12]*m2[1]+m1[13]*m2[5]+m1[14]*m2[9]+ m1[15]*m2[13],
        m1[12]*m2[2]+m1[13]*m2[6]+m1[14]*m2[10]+m1[15]*m2[14],
        m1[12]*m2[3]+m1[13]*m2[7]+m1[14]*m2[11]+m1[15]*m2[15],
    ]
}


